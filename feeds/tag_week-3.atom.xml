<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CCNY_Prep - Week 3</title><link href="/" rel="alternate"></link><link href="/feeds/tag_week-3.atom.xml" rel="self"></link><id>/</id><updated>2020-06-09T17:00:00-04:00</updated><subtitle>This is where I do test things</subtitle><entry><title>112 Path Sum (David)</title><link href="/blog/2020/06/09/112-path-sum-david/" rel="alternate"></link><published>2020-06-09T17:00:00-04:00</published><updated>2020-06-09T17:00:00-04:00</updated><author><name>David Hadaller</name></author><id>tag:None,2020-06-09:/blog/2020/06/09/112-path-sum-david/</id><summary type="html">&lt;p&gt;Here I solve the &lt;a href="https://leetcode.com/problems/path-sum/"&gt;Path Sum - LeetCode&lt;/a&gt; problem from&amp;nbsp;LeetCode:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree and a sum, determine if the tree has a root-to-leaf path  such that adding up all the values along the path equals the given&amp;nbsp;sum.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A leaf is a node with no&amp;nbsp;children.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Here I solve the &lt;a href="https://leetcode.com/problems/path-sum/"&gt;Path Sum - LeetCode&lt;/a&gt; problem from&amp;nbsp;LeetCode:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a binary tree and a sum, determine if the tree has a root-to-leaf path  such that adding up all the values along the path equals the given&amp;nbsp;sum.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; A leaf is a node with no&amp;nbsp;children.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given the below binary tree and &lt;code&gt;sum = 22&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;return true, as there exist a root-to-leaf path &lt;code&gt;5-&amp;gt;4-&amp;gt;11-&amp;gt;2&lt;/code&gt; which sum is&amp;nbsp;22.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The approach taken here is that we do a postorder traversal (because we&amp;#8217;re looking for paths that end in leaves)  As we go, we subtract the current node value from the path sum as we encounter new nodes. If the current node is a leaf node, and the &lt;code&gt;path_sum&lt;/code&gt; is 0, then we know that all the nodes on the way to the current add up to the orignial &lt;code&gt;path_sum&lt;/code&gt; before subtraction&amp;nbsp;began.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span class="c1"&gt;# class TreeNode:&lt;/span&gt;
&lt;span class="c1"&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span class="c1"&gt;#         self.val = val&lt;/span&gt;
&lt;span class="c1"&gt;#         self.left = left&lt;/span&gt;
&lt;span class="c1"&gt;#         self.right = right&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hasPathSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path_sum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="c1"&gt;# base case for stop traversal&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

        &lt;span class="c1"&gt;# base case for search: it has to be a path to a leaf. &lt;/span&gt;
        &lt;span class="c1"&gt;# omitting the leaf restriction means you look for paths of length k&lt;/span&gt;
        &lt;span class="c1"&gt;# ending at any arbitrary node.&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;path_sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;        

        &lt;span class="c1"&gt;# postorder traversal inductive step&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
            &lt;span class="n"&gt;left_path_has_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasPathSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path_sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;right_path_has_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hasPathSum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path_sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;root_path_hast_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left_path_has_sum&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;right_path_has_sum&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root_path_hast_sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><category term="David"></category><category term="Week 3"></category><category term="LeetCode"></category></entry><entry><title>404 Sum of Left Leaves (David)</title><link href="/blog/2020/06/09/404-sum-of-left-leaves-david/" rel="alternate"></link><published>2020-06-09T17:00:00-04:00</published><updated>2020-06-09T17:00:00-04:00</updated><author><name>David Hadaller</name></author><id>tag:None,2020-06-09:/blog/2020/06/09/404-sum-of-left-leaves-david/</id><summary type="html">&lt;p&gt;Here we solve the &lt;a href="https://leetcode.com/problems/sum-of-left-leaves/"&gt;Sum of Left Leaves - LeetCode&lt;/a&gt; problem from&amp;nbsp;LeetCode:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Find the sum of all left leaves in a given binary&amp;nbsp;tree.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;`
    3
   / \
  9  20
    /  \
   15&amp;nbsp;7&lt;/p&gt;
&lt;p&gt;There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.&amp;nbsp;&amp;#8220;`&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here we solve the &lt;a href="https://leetcode.com/problems/sum-of-left-leaves/"&gt;Sum of Left Leaves - LeetCode&lt;/a&gt; problem from&amp;nbsp;LeetCode:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Find the sum of all left leaves in a given binary&amp;nbsp;tree.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;`
    3
   / \
  9  20
    /  \
   15&amp;nbsp;7&lt;/p&gt;
&lt;p&gt;There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.&amp;nbsp;&amp;#8220;`&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is an interesting problem in that the solution requires some labeling (the comments below) to recognize the base case, and the recursive postorder&amp;nbsp;traversal.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Definition for a binary tree node.&lt;/span&gt;
&lt;span class="c1"&gt;# class TreeNode:&lt;/span&gt;
&lt;span class="c1"&gt;#     def __init__(self, val=0, left=None, right=None):&lt;/span&gt;
&lt;span class="c1"&gt;#         self.val = val&lt;/span&gt;
&lt;span class="c1"&gt;#         self.left = left&lt;/span&gt;
&lt;span class="c1"&gt;#         self.right = right&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sumOfLeftLeaves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TreeNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

            &lt;span class="c1"&gt;# base case for stopping traversal&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;  &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="c1"&gt;# base case for adding the left leaf value &lt;/span&gt;
        &lt;span class="c1"&gt;# (notice that this base case also has a recursive call onto the &lt;/span&gt;
        &lt;span class="c1"&gt;# right sub tree)&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumOfLeftLeaves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# this is the recursive step and it is a postorder traversal of the &lt;/span&gt;
        &lt;span class="c1"&gt;# binary tree compressed into a single line&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumOfLeftLeaves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sumOfLeftLeaves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# the code could also be written as follows to demonstrate that it is postorder:&lt;/span&gt;
            &lt;span class="c1"&gt;# left_sum = self.sumOfLeftLeaves(root.left)&lt;/span&gt;
            &lt;span class="c1"&gt;# right_sum = self.sumOfLeftLeaves(root.right)&lt;/span&gt;
            &lt;span class="c1"&gt;# root_sum = left_sum + right_sum&lt;/span&gt;
            &lt;span class="c1"&gt;# return root_sum&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><category term="David"></category><category term="Week 3"></category><category term="LeetCode"></category></entry><entry><title>84 Largest Rectangle in Histogram (David)</title><link href="/blog/2020/06/04/84-largest-rectangle-in-histogram-david/" rel="alternate"></link><published>2020-06-04T19:38:00-04:00</published><updated>2020-06-04T19:38:00-04:00</updated><author><name>David Hadaller</name></author><id>tag:None,2020-06-04:/blog/2020/06/04/84-largest-rectangle-in-histogram-david/</id><summary type="html">&lt;p&gt;This post is an in-depth explanation of the &lt;a href="https://leetcode.com/problems/largest-rectangle-in-histogram/description/"&gt;Largest Rectangle in Histogram&lt;/a&gt; problem from LeetCode based on &lt;a href="https://leetcode.com/problems/largest-rectangle-in-histogram/discuss/28917/AC-Python-clean-solution-using-stack-76ms"&gt;this solution by user dietpepsi&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt; non-negative integers representing the histogram&amp;#8217;s  bar height where the width of each bar is 1, find the area of largest  rectangle in the&amp;nbsp;histogram.&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="/images/84_histogram.png"&gt;
Above …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;This post is an in-depth explanation of the &lt;a href="https://leetcode.com/problems/largest-rectangle-in-histogram/description/"&gt;Largest Rectangle in Histogram&lt;/a&gt; problem from LeetCode based on &lt;a href="https://leetcode.com/problems/largest-rectangle-in-histogram/discuss/28917/AC-Python-clean-solution-using-stack-76ms"&gt;this solution by user dietpepsi&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt; non-negative integers representing the histogram&amp;#8217;s  bar height where the width of each bar is 1, find the area of largest  rectangle in the&amp;nbsp;histogram.&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="/images/84_histogram.png"&gt;
Above is a histogram where width of each bar is 1, given height = &lt;code&gt;[2,1,5,6,2,3]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="/images/84_histogram_area.png"&gt;
The largest rectangle is shown in the shaded area, which has area = &lt;code&gt;10&lt;/code&gt; unit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Input: [2,1,5,6,2,3]
Output: 10&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This problem can be solved with a stack approach with O(n) time complexity. Parentheses-matching problems are commonly solved with stack-based approaches, and they are intuitive to understand. So, it can be useful to think of the &lt;em&gt;Largest Rectangle in Histogram&lt;/em&gt; problem as an instance of a parentheses-matching problem, only instead of parentheses, you will match certain histogram bars. All rectangular areas in the histogram have one thing in common; they are book-ended by two bars (one on the right side, and one on the left side) which are smaller than the middle bars. In the example above, histogram bars with height 5 and 6 are caught between bars with height 1 and 2, thus forming a 5x2=10 rectangular&amp;nbsp;area.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Traverse the histogram and add bar indices to the stack.&lt;/strong&gt; In the code below, we traverse the histogram from left to right (→) in a for loop, adding a histogram&amp;#8217;s bar index to the stack whenever the height of the current  bar in the for loop is greater than or equal to the bar already on the stack.  So, bars placed on the stack will be increasing or staying the same in terms of height; this property is necessary to because the rectangle areas with the height of the smaller bars on the left can extend into the taller bars on the right (see gray rectangle in step 6 shown below for a reference&amp;nbsp;image.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stop traversing when you find a bar smaller than your previous bar.&lt;/strong&gt; The parsing, i.e. the for loop, must stop as soon as the height of the bars decreases. A decreasing histogram bar constitutes our &amp;#8220;right parentheses&amp;#8221; and the previous smallest bar consitutes our left parentheses. At that point, where we encounter our &amp;#8220;right parentheses&amp;#8221; we enter a while loop to find the rectangular areas under the histogram bars we&amp;#8217;ve been accumulating in the stack. The bars on the stack will only be those that are between our left and right parentheses&amp;nbsp;bars. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Calculate the area under that portion of the histogram after you stop the for loop.&lt;/strong&gt; We pop data off the stack and calculate the maximum area in the body of the while loop below. In the body of the while loop, &lt;code&gt;i&lt;/code&gt; remains fixed, while &lt;code&gt;stack[-1]&lt;/code&gt; represents an index farther and farther to the left as items are popped off the stack. The effect is that the smaller-height bars encountered earlier in the parsing have a greater width than the taller bars encountered later (again, see step 6 in the image below for reference.) In treating the histogram as a parentheses-matching problem, it becomes necessary to establish outer-most &amp;#8220;parentheses&amp;#8221; represented by the dummy bars with height zero at indices -1 and 6. These dummy bars allow us to find the width of the histogram area under consideration when we consider the leftmost or rightmost histogram bars on the plot. These parentheses exist   The variable &lt;code&gt;ans&lt;/code&gt; stores the height of largest area encountered so far. So,  &lt;code&gt;ans = max(ans, h * w)&lt;/code&gt; finds whether the previous maximum rectangular area,  &lt;code&gt;ans&lt;/code&gt;,  or the current rectangular area under consideration, &lt;code&gt;h * w&lt;/code&gt;, is greater and assigns &lt;code&gt;ans&lt;/code&gt; to that greater&amp;nbsp;value. &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;largestRectangleArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="c1"&gt;# traverse the histogram and add bar indices to the stack&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;

        &lt;span class="c1"&gt;# whenever you encounter a bar smaller than the previous bar, &lt;/span&gt;
        &lt;span class="c1"&gt;# stop traversing (and perform the while loop) &lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;

            &lt;span class="c1"&gt;# calculate the area under that portion of the histogram &lt;/span&gt;
            &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
            &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;img alt="84_fig_1" src="/images/84_fig_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="84_fig_2" src="/images/84_fig_2.jpg"&gt;&lt;/p&gt;</content><category term="David"></category><category term="Week 3"></category><category term="LeetCode"></category></entry><entry><title>Week 3 Excercises</title><link href="/blog/2020/06/02/week-3-excercises/" rel="alternate"></link><published>2020-06-02T03:26:00-04:00</published><updated>2020-06-02T03:26:00-04:00</updated><author><name>David Hadaller</name></author><id>tag:None,2020-06-02:/blog/2020/06/02/week-3-excercises/</id><summary type="html">&lt;h3 id="goals"&gt;Goals&lt;a class="headerlink" href="#goals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Practice time and space complexity&amp;nbsp;analysis&lt;/li&gt;
&lt;li&gt;Get comfortable with problem&amp;nbsp;identification&lt;/li&gt;
&lt;li&gt;Review linked lists, hash table, stacks, queues, heaps&amp;nbsp;problems&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wednesday"&gt;Wednesday&lt;a class="headerlink" href="#wednesday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/trapping-rain-water-ii/description/"&gt;Trapping Rain Water &lt;span class="caps"&gt;II&lt;/span&gt; -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/largest-rectangle-in-histogram/description/"&gt;Largest Rectangle in Histogram -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/smallest-range-i/"&gt;Smallest Range I -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="thursday"&gt;Thursday&lt;a class="headerlink" href="#thursday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/sort-characters-by-frequency/description/"&gt;Sort Characters By Frequency -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/daily-temperatures/description/"&gt;Daily Temperatures -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/4sum/description/"&gt;4Sum -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read time complexity …&lt;/p&gt;</summary><content type="html">&lt;h3 id="goals"&gt;Goals&lt;a class="headerlink" href="#goals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Practice time and space complexity&amp;nbsp;analysis&lt;/li&gt;
&lt;li&gt;Get comfortable with problem&amp;nbsp;identification&lt;/li&gt;
&lt;li&gt;Review linked lists, hash table, stacks, queues, heaps&amp;nbsp;problems&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wednesday"&gt;Wednesday&lt;a class="headerlink" href="#wednesday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/trapping-rain-water-ii/description/"&gt;Trapping Rain Water &lt;span class="caps"&gt;II&lt;/span&gt; -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/largest-rectangle-in-histogram/description/"&gt;Largest Rectangle in Histogram -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/smallest-range-i/"&gt;Smallest Range I -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="thursday"&gt;Thursday&lt;a class="headerlink" href="#thursday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/sort-characters-by-frequency/description/"&gt;Sort Characters By Frequency -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/daily-temperatures/description/"&gt;Daily Temperatures -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/4sum/description/"&gt;4Sum -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read time complexity&amp;nbsp;articles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/codepath/compsci_guides/wiki/Big-O-Complexity-Analysis"&gt;Big O Complexity Analysis · codepath/compsci_guides&amp;nbsp;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.interviewcake.com/article/java/big-o-notation-time-and-space-complexity"&gt;Big O Notation | Interview&amp;nbsp;Cake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.interviewcake.com/article/java/logarithms"&gt;Logarithms for algorithmic coding interviews | Interview&amp;nbsp;Cake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="saturday"&gt;Saturday&lt;a class="headerlink" href="#saturday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Work through the time complexity problems from &lt;a href="https://www.interviewbit.com/courses/programming/topics/time-complexity/"&gt;Interview Bit&lt;/a&gt;. Do as many problems as you can in these&amp;nbsp;sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic&amp;nbsp;primer&lt;/li&gt;
&lt;li&gt;math&lt;/li&gt;
&lt;li&gt;compare&amp;nbsp;functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After that, we will work through the following problems using &lt;span class="caps"&gt;UMPIRE&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/description/"&gt;Evaluate Reverse Polish Notation -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/trapping-rain-water/description/"&gt;Trapping Rain Water -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Talk through problems&lt;/strong&gt; - Select one person to code  the solution and rotate for the next question. The other person should  work with the coder to come up with a solution. This isn&amp;#8217;t just about  getting a correct solution but also effective&amp;nbsp;communication.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Come up with a few new example input/&amp;nbsp;outputs&lt;/li&gt;
&lt;li&gt;Talk about the edge&amp;nbsp;cases&lt;/li&gt;
&lt;li&gt;Talk about different&amp;nbsp;approaches&lt;/li&gt;
&lt;li&gt;Pseudocode&lt;/li&gt;
&lt;li&gt;Code the solution (talk throughout this&amp;nbsp;segment!)&lt;/li&gt;
&lt;li&gt;Test your&amp;nbsp;solution&lt;/li&gt;
&lt;li&gt;After completing a problem, scroll down to the bottom of this tab to  find the solution links and discuss/compare your solution with the  solution given. Is the one you&amp;#8217;ve developed less efficient or less  concise? Repeat this and work through the exercises&amp;nbsp;below.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Weekly Lessons"></category><category term="Week 3"></category><category term="Excercises"></category><category term="LeetCode"></category></entry></feed>