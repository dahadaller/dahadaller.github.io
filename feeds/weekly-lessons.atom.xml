<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CCNY_Prep - Weekly Lessons</title><link href="/" rel="alternate"></link><link href="/feeds/weekly-lessons.atom.xml" rel="self"></link><id>/</id><updated>2020-06-16T08:26:00-04:00</updated><subtitle>This is where I do test things</subtitle><entry><title>Week 5 Excercises</title><link href="/blog/2020/06/16/week-5-excercises/" rel="alternate"></link><published>2020-06-16T08:26:00-04:00</published><updated>2020-06-16T08:26:00-04:00</updated><author><name>David Hadaller</name></author><id>tag:None,2020-06-16:/blog/2020/06/16/week-5-excercises/</id><summary type="html">&lt;h2 id="goals"&gt;Goals&lt;a class="headerlink" href="#goals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Understand various graph&amp;nbsp;representations&lt;/li&gt;
&lt;li&gt;Recognize problems that can be solved with&amp;nbsp;graphs&lt;/li&gt;
&lt;li&gt;Know how to quickly implement graph searches (&lt;span class="caps"&gt;BFS&lt;/span&gt;, &lt;span class="caps"&gt;DFS&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;Recognize topological sort graph&amp;nbsp;problems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep in mind that during interviews coding questions are usually allotted 30-40 minutes. Given that time constraint, you should aim to spend around …&lt;/p&gt;</summary><content type="html">&lt;h2 id="goals"&gt;Goals&lt;a class="headerlink" href="#goals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Understand various graph&amp;nbsp;representations&lt;/li&gt;
&lt;li&gt;Recognize problems that can be solved with&amp;nbsp;graphs&lt;/li&gt;
&lt;li&gt;Know how to quickly implement graph searches (&lt;span class="caps"&gt;BFS&lt;/span&gt;, &lt;span class="caps"&gt;DFS&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;Recognize topological sort graph&amp;nbsp;problems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep in mind that during interviews coding questions are usually allotted 30-40 minutes. Given that time constraint, you should aim to spend around 15-20 minutes on each problem. So, figure out how to work through a particular class of problems, and then revisit them later on to cut down the time you spend on each&amp;nbsp;problem.&lt;/p&gt;
&lt;h2 id="tuesday"&gt;Tuesday&lt;a class="headerlink" href="#tuesday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Read the following articles and watch the youtube playlist that walks through graph&amp;nbsp;problems.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/codepath/compsci_guides/wiki/Graphs"&gt;Graphs · codepath/compsci_guides&amp;nbsp;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/codepath/compsci_guides/wiki/Graph-Traversals"&gt;Graph Traversals · codepath/compsci_guides&amp;nbsp;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/codepath/compsci_guides/wiki/Topological-Sort"&gt;Topological Sort · codepath/compsci_guides&amp;nbsp;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PL7zKQzeqjecKpXlM9hd_jA-9PZ6EZGzd0"&gt;Detect Cycle in Directed Graph -&amp;nbsp;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="thursday"&gt;Thursday&lt;a class="headerlink" href="#thursday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/sum-dependencies-graph/"&gt;Sum of dependencies in a graph -&amp;nbsp;GeeksforGeeks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/number-sink-nodes-graph/"&gt;Number of sink nodes in a graph -&amp;nbsp;GeeksforGeeks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="saturday"&gt;Saturday&lt;a class="headerlink" href="#saturday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/is-graph-bipartite/description/"&gt;Is Graph Bipartite? -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/minimum-height-trees/description/"&gt;Minimum Height Trees -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/clone-graph/description/"&gt;Clone Graph -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="other-problems"&gt;Other Problems&lt;a class="headerlink" href="#other-problems" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/evaluate-division/description/"&gt;Evaluate Division -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/"&gt;Kth Smallest Element in a &lt;span class="caps"&gt;BST&lt;/span&gt; -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/"&gt;Lowest Common Ancestor of a Binary Tree -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackerrank.com/challenges/journey-to-the-moon/problem"&gt;Journey to the Moon |&amp;nbsp;HackerRank&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="other-resources"&gt;Other Resources&lt;a class="headerlink" href="#other-resources" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;(This section covers algorithms that will come up less frequently in interviews.)
- &lt;a href="https://www.hackerearth.com/practice/notes/disjoint-set-union-union-find/"&gt;Union Find, Disjoint Sets Guide&lt;/a&gt;
- &lt;a href="https://leetcode.com/tag/union-find/"&gt;Union Find, Disjoint Sets Interview question bank&lt;/a&gt;
- &lt;a href="https://www.hackerearth.com/practice/algorithms/graphs/shortest-path-algorithms/tutorial/"&gt;Shortest Paths Algorithms Guide&lt;/a&gt;
- &lt;a href="https://www.hackerearth.com/practice/algorithms/graphs/shortest-path-algorithms/practice-problems/"&gt;Shortest Paths Algorithms Interview Question Bank&lt;/a&gt;
- &lt;a href="https://www.hackerearth.com/practice/algorithms/graphs/minimum-spanning-tree/tutorial/"&gt;Minimum Spanning Trees Guide&lt;/a&gt;
- &lt;a href="https://www.hackerearth.com/practice/algorithms/graphs/minimum-spanning-tree/practice-problems/"&gt;Minimum Spanning Trees Interview Question&amp;nbsp;Bank&lt;/a&gt;&lt;/p&gt;</content><category term="Weekly Lessons"></category><category term="Week 5"></category><category term="Excercises"></category><category term="LeetCode"></category></entry><entry><title>Week 4 Excercises</title><link href="/blog/2020/06/07/week-4-excercises/" rel="alternate"></link><published>2020-06-07T03:26:00-04:00</published><updated>2020-06-07T03:26:00-04:00</updated><author><name>David Hadaller</name></author><id>tag:None,2020-06-07:/blog/2020/06/07/week-4-excercises/</id><summary type="html">&lt;h2 id="goals"&gt;Goals&lt;a class="headerlink" href="#goals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Know how to search for values in binary search tree in optimal&amp;nbsp;way&lt;/li&gt;
&lt;li&gt;Understand and be able to implement the following types of traversals, including when to use them and their tradeoffs&lt;ul&gt;
&lt;li&gt;In-order, pre-order,&amp;nbsp;post-order&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;BFS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DFS&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Understand how to implement at least one traversal in iterative&amp;nbsp;approach&lt;/li&gt;
&lt;li&gt;Understand …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2 id="goals"&gt;Goals&lt;a class="headerlink" href="#goals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Know how to search for values in binary search tree in optimal&amp;nbsp;way&lt;/li&gt;
&lt;li&gt;Understand and be able to implement the following types of traversals, including when to use them and their tradeoffs&lt;ul&gt;
&lt;li&gt;In-order, pre-order,&amp;nbsp;post-order&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;BFS&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DFS&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Understand how to implement at least one traversal in iterative&amp;nbsp;approach&lt;/li&gt;
&lt;li&gt;Understand the concept of augmented trees and when they can be&amp;nbsp;useful&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="monday"&gt;Monday&lt;a class="headerlink" href="#monday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/codepath/compsci_guides/wiki/Binary-Trees"&gt;Binary Trees · codepath/compsci_guides&amp;nbsp;Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/codepath/compsci_guides/wiki/Binary-Trees-Iterative-Traversal"&gt;Binary Trees Iterative Traversal Design&amp;nbsp;Pattern&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/codepath/compsci_guides/wiki/Binary-Trees-2nd-Largest-Node"&gt;Binary Trees 2nd Largest Node Desogn&amp;nbsp;Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wednesday"&gt;Wednesday&lt;a class="headerlink" href="#wednesday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/invert-binary-tree/"&gt;Invert Binary Tree -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/symmetric-tree/description/"&gt;Symmetric Tree -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/balanced-binary-tree/"&gt;Balanced Binary Tree -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/validate-binary-search-tree/description/"&gt;Validate Binary Search Tree -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/binary-tree-pruning/description/"&gt;Binary Tree Pruning -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/"&gt;Kth Smallest Element in a &lt;span class="caps"&gt;BST&lt;/span&gt; -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="saturday"&gt;Saturday&lt;a class="headerlink" href="#saturday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/description/"&gt;Binary Tree Level Order Traversal &lt;span class="caps"&gt;II&lt;/span&gt; -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/description/"&gt;Minimum Depth of Binary Tree -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/description/"&gt;Flatten Binary Tree to Linked List -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/find-duplicate-subtrees/description/"&gt;Find Duplicate Subtrees -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="bonus"&gt;Bonus&lt;a class="headerlink" href="#bonus" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/subtree-of-another-tree/description/"&gt;Subtree of Another Tree -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/most-frequent-subtree-sum/description/"&gt;Most Frequent Subtree Sum -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/description/"&gt;Convert Sorted Array to Binary Search Tree -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/print-binary-tree-vertical-order/"&gt;Print a Binary Tree in Vertical Order | Set 1 -&amp;nbsp;GeeksforGeeks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/path-sum/"&gt;Path Sum -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/description/"&gt;Minimum Depth of Binary Tree -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/description/"&gt;Flatten Binary Tree to Linked List -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Weekly Lessons"></category><category term="Week 4"></category><category term="Excercises"></category><category term="LeetCode"></category></entry><entry><title>Week 3 Excercises</title><link href="/blog/2020/06/02/week-3-excercises/" rel="alternate"></link><published>2020-06-02T03:26:00-04:00</published><updated>2020-06-02T03:26:00-04:00</updated><author><name>David Hadaller</name></author><id>tag:None,2020-06-02:/blog/2020/06/02/week-3-excercises/</id><summary type="html">&lt;h3 id="goals"&gt;Goals&lt;a class="headerlink" href="#goals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Practice time and space complexity&amp;nbsp;analysis&lt;/li&gt;
&lt;li&gt;Get comfortable with problem&amp;nbsp;identification&lt;/li&gt;
&lt;li&gt;Review linked lists, hash table, stacks, queues, heaps&amp;nbsp;problems&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wednesday"&gt;Wednesday&lt;a class="headerlink" href="#wednesday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/trapping-rain-water-ii/description/"&gt;Trapping Rain Water &lt;span class="caps"&gt;II&lt;/span&gt; -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/largest-rectangle-in-histogram/description/"&gt;Largest Rectangle in Histogram -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/smallest-range-i/"&gt;Smallest Range I -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="thursday"&gt;Thursday&lt;a class="headerlink" href="#thursday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/sort-characters-by-frequency/description/"&gt;Sort Characters By Frequency -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/daily-temperatures/description/"&gt;Daily Temperatures -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/4sum/description/"&gt;4Sum -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read time complexity …&lt;/p&gt;</summary><content type="html">&lt;h3 id="goals"&gt;Goals&lt;a class="headerlink" href="#goals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Practice time and space complexity&amp;nbsp;analysis&lt;/li&gt;
&lt;li&gt;Get comfortable with problem&amp;nbsp;identification&lt;/li&gt;
&lt;li&gt;Review linked lists, hash table, stacks, queues, heaps&amp;nbsp;problems&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="wednesday"&gt;Wednesday&lt;a class="headerlink" href="#wednesday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/trapping-rain-water-ii/description/"&gt;Trapping Rain Water &lt;span class="caps"&gt;II&lt;/span&gt; -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/largest-rectangle-in-histogram/description/"&gt;Largest Rectangle in Histogram -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/smallest-range-i/"&gt;Smallest Range I -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="thursday"&gt;Thursday&lt;a class="headerlink" href="#thursday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/sort-characters-by-frequency/description/"&gt;Sort Characters By Frequency -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/daily-temperatures/description/"&gt;Daily Temperatures -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/4sum/description/"&gt;4Sum -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read time complexity&amp;nbsp;articles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/codepath/compsci_guides/wiki/Big-O-Complexity-Analysis"&gt;Big O Complexity Analysis · codepath/compsci_guides&amp;nbsp;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.interviewcake.com/article/java/big-o-notation-time-and-space-complexity"&gt;Big O Notation | Interview&amp;nbsp;Cake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.interviewcake.com/article/java/logarithms"&gt;Logarithms for algorithmic coding interviews | Interview&amp;nbsp;Cake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="saturday"&gt;Saturday&lt;a class="headerlink" href="#saturday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Work through the time complexity problems from &lt;a href="https://www.interviewbit.com/courses/programming/topics/time-complexity/"&gt;Interview Bit&lt;/a&gt;. Do as many problems as you can in these&amp;nbsp;sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic&amp;nbsp;primer&lt;/li&gt;
&lt;li&gt;math&lt;/li&gt;
&lt;li&gt;compare&amp;nbsp;functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After that, we will work through the following problems using &lt;span class="caps"&gt;UMPIRE&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/description/"&gt;Evaluate Reverse Polish Notation -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/trapping-rain-water/description/"&gt;Trapping Rain Water -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Talk through problems&lt;/strong&gt; - Select one person to code  the solution and rotate for the next question. The other person should  work with the coder to come up with a solution. This isn&amp;#8217;t just about  getting a correct solution but also effective&amp;nbsp;communication.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Come up with a few new example input/&amp;nbsp;outputs&lt;/li&gt;
&lt;li&gt;Talk about the edge&amp;nbsp;cases&lt;/li&gt;
&lt;li&gt;Talk about different&amp;nbsp;approaches&lt;/li&gt;
&lt;li&gt;Pseudocode&lt;/li&gt;
&lt;li&gt;Code the solution (talk throughout this&amp;nbsp;segment!)&lt;/li&gt;
&lt;li&gt;Test your&amp;nbsp;solution&lt;/li&gt;
&lt;li&gt;After completing a problem, scroll down to the bottom of this tab to  find the solution links and discuss/compare your solution with the  solution given. Is the one you&amp;#8217;ve developed less efficient or less  concise? Repeat this and work through the exercises&amp;nbsp;below.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Weekly Lessons"></category><category term="Week 3"></category><category term="Excercises"></category><category term="LeetCode"></category></entry><entry><title>Week 2 Excercises</title><link href="/blog/2020/05/26/week-2-excercises/" rel="alternate"></link><published>2020-05-26T17:15:00-04:00</published><updated>2020-05-26T17:15:00-04:00</updated><author><name>David Hadaller</name></author><id>tag:None,2020-05-26:/blog/2020/05/26/week-2-excercises/</id><summary type="html">&lt;h3 id="goals"&gt;Goals&lt;a class="headerlink" href="#goals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This week we will be covering the fundamentals of &lt;em&gt;hash tables, heaps, stacks, and queues&lt;/em&gt; and common ways they appear in&amp;nbsp;interviews.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test understanding of run times of each data&amp;nbsp;structure&lt;/li&gt;
&lt;li&gt;Being able to identify the proper data structure to&amp;nbsp;use&lt;/li&gt;
&lt;li&gt;Familiarity with hash tables, heaps, queues,&amp;nbsp;stacks&lt;/li&gt;
&lt;li&gt;Learning …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3 id="goals"&gt;Goals&lt;a class="headerlink" href="#goals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This week we will be covering the fundamentals of &lt;em&gt;hash tables, heaps, stacks, and queues&lt;/em&gt; and common ways they appear in&amp;nbsp;interviews.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Test understanding of run times of each data&amp;nbsp;structure&lt;/li&gt;
&lt;li&gt;Being able to identify the proper data structure to&amp;nbsp;use&lt;/li&gt;
&lt;li&gt;Familiarity with hash tables, heaps, queues,&amp;nbsp;stacks&lt;/li&gt;
&lt;li&gt;Learning how to better communicate in an interview&amp;nbsp;setting&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tuesday"&gt;Tuesday&lt;a class="headerlink" href="#tuesday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/jewels-and-stones/description/"&gt;Jewels and Stones -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/valid-sudoku/description/"&gt;Valid Sudoku -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="thursday"&gt;Thursday&lt;a class="headerlink" href="#thursday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Do the following readings&amp;nbsp;(important):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/codepath/compsci_guides/wiki/Hash-Tables"&gt;Hash Tables · codepath/compsci_guides&amp;nbsp;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/codepath/compsci_guides/wiki/Heaps"&gt;Heaps · codepath/compsci_guides&amp;nbsp;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/codepath/compsci_guides/wiki/Stacks-and-Queues"&gt;Stacks and Queues · codepath/compsci_guides&amp;nbsp;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And solve the following&amp;nbsp;problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/implement-queue-using-stacks/description/"&gt;Implement Queue using Stacks -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/find-median-from-data-stream/description/"&gt;Find Median from Data Stream -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/isomorphic-strings/description/"&gt;Isomorphic Strings -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/happy-number/description/"&gt;Happy Number -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="saturday"&gt;Saturday&lt;a class="headerlink" href="#saturday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/top-k-frequent-words/description/"&gt;Top K Frequent Words -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/find-k-pairs-with-smallest-sums/description/"&gt;Find K Pairs with Smallest Sums -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PL7zKQzeqjecKERijhtFeWf7OYwt27mfKP"&gt;Top K Frequent Words Walkthrough -&amp;nbsp;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Weekly Lessons"></category><category term="Week 2"></category><category term="Excercises"></category><category term="LeetCode"></category></entry><entry><title>Bloomberg Excercises</title><link href="/blog/2020/05/17/bloomberg-excercises/" rel="alternate"></link><published>2020-05-17T11:15:00-04:00</published><updated>2020-05-17T11:15:00-04:00</updated><author><name>David Hadaller</name></author><id>tag:None,2020-05-17:/blog/2020/05/17/bloomberg-excercises/</id><summary type="html">&lt;p&gt;User &lt;a href="https://leetcode.com/raptor16/"&gt;raptor16&lt;/a&gt; from leetcode compiled the following list of Bloomberg&amp;#8217;s phone interview questions (original can be found &lt;a href="https://leetcode.com/raptor16/"&gt;here&lt;/a&gt;): &lt;/p&gt;
&lt;h3 id="monday"&gt;Monday&lt;a class="headerlink" href="#monday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/diameter-of-binary-tree/"&gt;Diameter of Binary&amp;nbsp;Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/number-of-islands/"&gt;Number of&amp;nbsp;Islands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/two-sum"&gt;Two&amp;nbsp;Sum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/subsets"&gt;Given a string print all subsets (not&amp;nbsp;permutations)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/two-city-scheduling/description/"&gt;Two City&amp;nbsp;Scheduling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Electronic&amp;nbsp;Exchange.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You work in an electronic exchange. Throughout the …&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;User &lt;a href="https://leetcode.com/raptor16/"&gt;raptor16&lt;/a&gt; from leetcode compiled the following list of Bloomberg&amp;#8217;s phone interview questions (original can be found &lt;a href="https://leetcode.com/raptor16/"&gt;here&lt;/a&gt;): &lt;/p&gt;
&lt;h3 id="monday"&gt;Monday&lt;a class="headerlink" href="#monday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/diameter-of-binary-tree/"&gt;Diameter of Binary&amp;nbsp;Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/number-of-islands/"&gt;Number of&amp;nbsp;Islands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/two-sum"&gt;Two&amp;nbsp;Sum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/subsets"&gt;Given a string print all subsets (not&amp;nbsp;permutations)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/two-city-scheduling/description/"&gt;Two City&amp;nbsp;Scheduling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Electronic&amp;nbsp;Exchange.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You work in an electronic exchange. Throughout the day, you receive ticks (trading data) which consists of  product name and its traded volume of stocks. Eg: {name: vodafone, volume: 20}. What data structure will you 
maintain&amp;nbsp;if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have to tell top k products traded by volume at end of&amp;nbsp;day.&lt;/li&gt;
&lt;li&gt;You have to tell top k products traded by volume throughout the&amp;nbsp;day.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insert Delete GetRandom&amp;nbsp;o(1)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Design a data structure with requirements:
You have a &lt;Key, Value&gt; structured input data for all objects
Where you have
Insert : O(1)
Lookup : O(1)
Delete : O(1)
You can traverse the added elements in the order they were&amp;nbsp;inserted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Similar to&amp;nbsp;https://leetcode.com/problems/insert-delete-getrandom-o1/&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/discuss/interview-question/380650/Bloomberg-or-Phone-Screen-or-Candy-Crush-1D"&gt;1D candy&amp;nbsp;crush&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/discuss/interview-question/124551/"&gt;Remove&amp;nbsp;parentheses&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given a string of parentheses:
s = &amp;#8220;()(()()()()())&amp;#8221;
Remove the minimum amount of parentheses to make the string parentheses balanced&amp;nbsp;in-place&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/lru-cache/"&gt;&lt;span class="caps"&gt;LRU&lt;/span&gt;&amp;nbsp;Cache&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="wednesday"&gt;Wednesday&lt;a class="headerlink" href="#wednesday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/decode-string/"&gt;Decode&amp;nbsp;String&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/valid-anagram/"&gt;Valid&amp;nbsp;Anagram&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/palindrome-number/"&gt;Palindrome Number&lt;/a&gt; Optimize from O(N) to O(log N) time&amp;nbsp;complexity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/"&gt;Flatten a multilevel doubly linked&amp;nbsp;list&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/discuss/interview-question/314733/Bloomberg-or-Output-data-from-a-stream-in-order"&gt;Output data from a stream in&amp;nbsp;order&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Input: (1, &amp;#8220;abcd&amp;#8221;), (2, &amp;#8220;efgh&amp;#8221;), (4, &amp;#8220;mnop&amp;#8221;), (5, &amp;#8220;qrst&amp;#8221;), (3,&amp;nbsp;&amp;#8220;ijkl&amp;#8221;)&lt;/p&gt;
&lt;p&gt;Write a program to output the data from the stream in realtime in order, so 1,2,3,4,5..
You cannot queue up the incoming data from the stream.
So for example if the first incoming bit of data is (1, &amp;#8220;abcd&amp;#8221;), and the second is (4, &amp;#8220;mnop&amp;#8221;), you cannot output (4, &amp;#8220;mnop&amp;#8221;) until you get 2,&amp;nbsp;3.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/discuss/interview-question/406663/Bloomberg-or-Phone-Screen-or-Min-Steps-to-Generate-Number"&gt;Find the minimum steps to generate a number given only two operations (&lt;span class="caps"&gt;BFS&lt;/span&gt;)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;https://leetcode.com/discuss/interview-question/329221/Bloomberg-or-Phone-screen-or-Software-Development-Internship-2019&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/discuss/interview-question/413734/Bloomberg-or-Re-order-Array-Based-on-Dictionary"&gt;Reorder array based on dictionary&lt;/a&gt;
      Similar to &lt;a href="https://leetcode.com/problems/reconstruct-itinerary/"&gt;Reconstruct&amp;nbsp;Itinerary&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="saturday"&gt;Saturday&lt;a class="headerlink" href="#saturday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/word-break-ii/"&gt;Word Break &lt;span class="caps"&gt;II&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/subsets/"&gt;Subsets&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/"&gt;Longest Substring without repeating&amp;nbsp;characters&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/discuss/interview-question/341369/Bloomberg-or-Phone-screen-or-First-unique-element-and-Flatten-linked-list"&gt;Flatten Linked List or First Unique&amp;nbsp;Element&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/discuss/interview-question/346748/Bloomberg-or-Phone-Screen-or-File-Diffs-With-Ram-Constraints"&gt; File Diffs with &lt;span class="caps"&gt;RAM&lt;/span&gt;&amp;nbsp;Constraints &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://leetcode.com/discuss/interview-question/407179/Bloomberg-or-Remove-array-elements-in-given-index-ranges"&gt;Remove array elements in given index&amp;nbsp;ranges&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Right side view and Word Search: This is the question I (the author) got on my phone interview today. Nov 10 2019. I got 2 Leetcode medium questions with 5 minutes for questions and 5 minute for introductions, leaving 35 minutes for the coding  portion. We discussed my past experience and he probled in deeper to see if I did have a good understanding of the tech stack that was used by  my previous&amp;nbsp;internship.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;LC&lt;/span&gt; Medium: &lt;a href="https://leetcode.com/problems/binary-tree-right-side-view/"&gt;Right side view of a binary tree&lt;/a&gt;
  They expected this code to compile and be tested out to be completely bug free, so you need to write the test cases&amp;nbsp;yourself.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;LC&lt;/span&gt; Medium: &lt;a href="https://leetcode.com/problems/word-search/"&gt;Word Search I&lt;/a&gt;
  The interviewer did not expect this code to compile, so long as the  general idea is correct you are good. You are expected to manually run  through your code using their&amp;nbsp;example.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;More under the interview experience section of&amp;nbsp;leetcode&lt;/p&gt;
&lt;p&gt;Why Bloomberg
 &lt;span class="caps"&gt;OOP&lt;/span&gt; Questions
 Discuss the difference between Python, Java, and Javascript
 &lt;span class="caps"&gt;LC&lt;/span&gt;: Intersection of two linked list x2
 Check if two linked lists intersect and return the intersecting point
 &lt;span class="caps"&gt;LC&lt;/span&gt;: Candy Crush
 &lt;span class="caps"&gt;LC&lt;/span&gt;: Merge Intervals
 &lt;span class="caps"&gt;LC&lt;/span&gt;: Add two numbers
 &lt;span class="caps"&gt;LC&lt;/span&gt;: Interleaving strings
 Implement a vector in C++ (use dynamic array approach)
 &lt;span class="caps"&gt;LC&lt;/span&gt;: Insert delete getrandom o(1)
 Occurence sort: given a string sort the string based on the number of  times a letter appears in the string from most occurring to least  occurring. For letters having the same occurrence sort based on  lexicographical order
 &lt;span class="caps"&gt;LC&lt;/span&gt;: Trapping rain water
 &lt;span class="caps"&gt;LC&lt;/span&gt; Two sum
 Iterative and Recursive &lt;span class="caps"&gt;BS&lt;/span&gt;
 &lt;span class="caps"&gt;LC&lt;/span&gt; 3Sum
 Onsite (ignore for now)
 Definition of a Binary Search Tree followed by a coding question on finding the kth largest element in a binary search&amp;nbsp;tree&lt;/p&gt;</content><category term="Weekly Lessons"></category><category term="Bloomberg"></category><category term="Excercises"></category><category term="LeetCode"></category></entry><entry><title>Week 1 Excercises</title><link href="/blog/2020/05/09/week-1-excercises/" rel="alternate"></link><published>2020-05-09T11:15:00-04:00</published><updated>2020-05-09T11:15:00-04:00</updated><author><name>David Hadaller</name></author><id>tag:None,2020-05-09:/blog/2020/05/09/week-1-excercises/</id><summary type="html">&lt;h3 id="goals"&gt;Goals&lt;a class="headerlink" href="#goals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This week we will be covering the fundamentals of &lt;em&gt;linked lists&lt;/em&gt; and common ways they appear in&amp;nbsp;interviews.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easily build a linked&amp;nbsp;list&lt;/li&gt;
&lt;li&gt;Understand most common&amp;nbsp;variants&lt;/li&gt;
&lt;li&gt;Feel comfortable with&amp;nbsp;recursion&lt;/li&gt;
&lt;li&gt;Two pointer&amp;nbsp;technique&lt;/li&gt;
&lt;li&gt;Dummy head&amp;nbsp;technique&lt;/li&gt;
&lt;li&gt;Comfort with pointer&amp;nbsp;bookkeeping&lt;/li&gt;
&lt;li&gt;Framework for approaching Linked List&amp;nbsp;problems&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="monday"&gt;Monday&lt;a class="headerlink" href="#monday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Read …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h3 id="goals"&gt;Goals&lt;a class="headerlink" href="#goals" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This week we will be covering the fundamentals of &lt;em&gt;linked lists&lt;/em&gt; and common ways they appear in&amp;nbsp;interviews.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easily build a linked&amp;nbsp;list&lt;/li&gt;
&lt;li&gt;Understand most common&amp;nbsp;variants&lt;/li&gt;
&lt;li&gt;Feel comfortable with&amp;nbsp;recursion&lt;/li&gt;
&lt;li&gt;Two pointer&amp;nbsp;technique&lt;/li&gt;
&lt;li&gt;Dummy head&amp;nbsp;technique&lt;/li&gt;
&lt;li&gt;Comfort with pointer&amp;nbsp;bookkeeping&lt;/li&gt;
&lt;li&gt;Framework for approaching Linked List&amp;nbsp;problems&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="monday"&gt;Monday&lt;a class="headerlink" href="#monday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Read the &lt;a href="https://github.com/codepath/compsci_guides/wiki/Linked-Lists"&gt;Linked List Codepath Wiki&amp;nbsp;Article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read about the &lt;a href="https://github.com/codepath/compsci_guides/wiki/Dummy-Head"&gt;Dummy Head&lt;/a&gt;, &lt;a href="https://github.com/codepath/compsci_guides/wiki/Multiple-Pass"&gt;Multiple Pass&lt;/a&gt;, and &lt;a href="https://github.com/codepath/compsci_guides/wiki/Linked-List-Two-Pointer"&gt;Two-Pointer&lt;/a&gt; linked list design&amp;nbsp;patterns.&lt;/li&gt;
&lt;li&gt;Solve the following problems (shoot for 30-90 minutes in total)&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/delete-node-in-a-linked-list/"&gt;Delete Node in a Linked List -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/reverse-linked-list/"&gt;Reverse Linked List -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/linked-list-cycle/"&gt;Linked List Cycle -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/add-two-numbers/"&gt;Add Two Numbers -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="wednesday"&gt;Wednesday&lt;a class="headerlink" href="#wednesday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Read the &lt;span class="caps"&gt;UMPIRE&lt;/span&gt; method post &lt;a href="/umpire/"&gt;here&lt;/a&gt; and follow the steps (Understand, Match, Prototype, Implement, Review, and Evaluate) as you solve the problems. Take special care to match based on the linked list designed patterns learned on Monday, and to sketch visualizations / write pseudo code on a notepad near your computer. Pointer Bookeeping (demonstrated in &lt;a href="https://www.youtube.com/watch?list=PLrT2tZ9JRrf65ueO-CGGT_Y8pfZfHv0vR&amp;amp;v=RH9-7SPVZw4"&gt;this lecture&lt;/a&gt;) can be a helpful tool for linked list diagramming. Also, for a refresher on how pointers work in python read this article on &lt;a href="http://foobarnbaz.com/2012/07/08/understanding-python-variables/"&gt;python variables and memory management&lt;/a&gt; and/or this passage about &lt;a href="https://realpython.com/pointers-in-python/#simulating-pointers-in-python"&gt;simulating pointers in python&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/odd-even-linked-list/"&gt;Odd Even Linked List -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/swap-nodes-in-pairs/"&gt;Swap Nodes in Pairs -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/rotate-list/description/"&gt;Rotate List -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/partition-list/"&gt;Partition List -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/add-two-numbers-ii/"&gt;Add Two Numbers &lt;span class="caps"&gt;II&lt;/span&gt; -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="saturday"&gt;Saturday&lt;a class="headerlink" href="#saturday" title="Permanent link"&gt;&amp;para;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/merge-two-sorted-lists/"&gt;Merge Two Sorted Lists -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/intersection-of-two-linked-lists/"&gt;Intersection of Two Linked Lists -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/copy-list-with-random-pointer/"&gt;Copy List with Random Pointer -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/linked-list-cycle-ii/"&gt;Linked List Cycle &lt;span class="caps"&gt;II&lt;/span&gt; -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/"&gt;Remove Duplicates from Sorted List &lt;span class="caps"&gt;II&lt;/span&gt; -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/reorder-list/"&gt;Reorder List -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/problems/merge-k-sorted-lists/"&gt;Merge k Sorted Lists -&amp;nbsp;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Weekly Lessons"></category><category term="Week 1"></category><category term="Excercises"></category><category term="LeetCode"></category></entry></feed>