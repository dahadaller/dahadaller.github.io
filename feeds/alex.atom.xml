<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CCNY_Prep - Alex</title><link href="/" rel="alternate"></link><link href="/feeds/alex.atom.xml" rel="self"></link><id>/</id><updated>2020-05-10T22:30:00-04:00</updated><subtitle>This is where I do test things</subtitle><entry><title>Add Two Numbers</title><link href="/blog/2020/05/10/add-two-numbers/" rel="alternate"></link><published>2020-05-10T22:30:00-04:00</published><updated>2020-05-10T22:30:00-04:00</updated><author><name>Alex Matson</name></author><id>tag:None,2020-05-10:/blog/2020/05/10/add-two-numbers/</id><summary type="html">&lt;p&gt;This post will cover my solution in Python 3 for LeetCode&amp;#8217;s &lt;a href="https://leetcode.com/problems/add-two-numbers/"&gt;Add Two Numbers&lt;/a&gt; problem. The problem wants us to add two numbers (&lt;code&gt;l1&lt;/code&gt; and &lt;code&gt;l2&lt;/code&gt; that are encoded as linked lists, such that each digit is a linked list node. In this scheme, the digits in the linked …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post will cover my solution in Python 3 for LeetCode&amp;#8217;s &lt;a href="https://leetcode.com/problems/add-two-numbers/"&gt;Add Two Numbers&lt;/a&gt; problem. The problem wants us to add two numbers (&lt;code&gt;l1&lt;/code&gt; and &lt;code&gt;l2&lt;/code&gt; that are encoded as linked lists, such that each digit is a linked list node. In this scheme, the digits in the linked list are ordered from least significant to most signficant. Thus, the number &lt;code&gt;254&lt;/code&gt; would be represented as the linked list &lt;code&gt;4 -&amp;gt; 5 -&amp;gt; 2 -&amp;gt; None&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;The general approach to the problem that I took was to loop through the lists, pairwise add the digits of &lt;code&gt;l1&lt;/code&gt; and &lt;code&gt;l2&lt;/code&gt; and insert them as new nodes into a return list. I&amp;#8217;ll walk through my solution with some annotated code&amp;nbsp;snippets. &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Definition for singly-linked list.&lt;/span&gt;
&lt;span class="c1"&gt;# class ListNode:&lt;/span&gt;
&lt;span class="c1"&gt;#     def __init__(self, x):&lt;/span&gt;
&lt;span class="c1"&gt;#         self.val = x&lt;/span&gt;
&lt;span class="c1"&gt;#         self.next = None&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Solution:&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;addTwoNumbers&lt;/span&gt;(&lt;span class="nb"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;l1:&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;, &lt;span class="n"&gt;l2:&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;) -&amp;gt; &lt;span class="n"&gt;ListNode:&lt;/span&gt;
    &lt;span class="c1"&gt;# Use dummy head technique as a starting point for the algorithm&lt;/span&gt;
    &lt;span class="nb"&gt;head&lt;/span&gt; = &lt;span class="n"&gt;ListNode&lt;/span&gt;(&lt;span class="s"&gt;&amp;quot;dummy&amp;quot;&lt;/span&gt;)
    &lt;span class="n"&gt;current&lt;/span&gt; = &lt;span class="nb"&gt;head&lt;/span&gt;

    &lt;span class="c1"&gt;# Iterate through the lists until _both_ are None&lt;/span&gt;
    &lt;span class="c1"&gt;# This means, even if one is shorter than the other, keep looping anyway&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;or&lt;/span&gt; &lt;span class="n"&gt;l2:&lt;/span&gt;
        &lt;span class="c1"&gt;# Default to &amp;quot;0&amp;quot; if one of the lists is out of digits&lt;/span&gt;
        &lt;span class="n"&gt;val1&lt;/span&gt; = &lt;span class="n"&gt;l1&lt;/span&gt;.&lt;span class="nb"&gt;val&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;val2&lt;/span&gt; = &lt;span class="n"&gt;l2&lt;/span&gt;.&lt;span class="nb"&gt;val&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="c1"&gt;# Compute the sum of the two digits for the result digit&lt;/span&gt;
        &lt;span class="n"&gt;digit&lt;/span&gt; = &lt;span class="n"&gt;val1&lt;/span&gt; + &lt;span class="n"&gt;val2&lt;/span&gt;

        &lt;span class="c1"&gt;# Move a carry by adding 1 to the next node in l1 or l2 -- depending on which one actually has a &amp;quot;next&amp;quot; node available&lt;/span&gt;
        &lt;span class="c1"&gt;# If neither l1 or l2 have a next node available, (for example, you are carrying past the final digit of the longer l1/l2)&lt;/span&gt;
        &lt;span class="c1"&gt;# then just create a new node and append it to the end&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &amp;gt;= &lt;span class="mi"&gt;10&lt;/span&gt;:
        &lt;span class="n"&gt;node&lt;/span&gt; = &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;.&lt;span class="n"&gt;next:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;.&lt;span class="nb"&gt;next&lt;/span&gt;.&lt;span class="nb"&gt;val&lt;/span&gt; += &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;else:&lt;/span&gt;
            &lt;span class="n"&gt;node&lt;/span&gt;.&lt;span class="nb"&gt;next&lt;/span&gt; = &lt;span class="n"&gt;ListNode&lt;/span&gt;(&lt;span class="mi"&gt;1&lt;/span&gt;)

        &lt;span class="n"&gt;temp&lt;/span&gt; = &lt;span class="n"&gt;ListNode&lt;/span&gt;(&lt;span class="n"&gt;digit&lt;/span&gt; % &lt;span class="mi"&gt;10&lt;/span&gt;)

        &lt;span class="c1"&gt;# Put this digit as a node into our result list&lt;/span&gt;
        &lt;span class="c1"&gt;# Move the result list forward&lt;/span&gt;
        &lt;span class="n"&gt;current&lt;/span&gt;.&lt;span class="nb"&gt;next&lt;/span&gt; = &lt;span class="n"&gt;temp&lt;/span&gt;
        &lt;span class="n"&gt;current&lt;/span&gt; = &lt;span class="n"&gt;current&lt;/span&gt;.&lt;span class="nb"&gt;next&lt;/span&gt;

        &lt;span class="c1"&gt;# Move l1 and l2 forward, for as long as they have a &amp;quot;next&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;l1&lt;/span&gt; = &lt;span class="n"&gt;l1&lt;/span&gt;.&lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;
        &lt;span class="n"&gt;l2&lt;/span&gt; = &lt;span class="n"&gt;l2&lt;/span&gt;.&lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;

    &lt;span class="c1"&gt;# Return the next to exclude our dummy head from the beginning&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;head&lt;/span&gt;.&lt;span class="nb"&gt;next&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><category term="Alex"></category><category term="LeetCode"></category><category term="Week 1"></category></entry></feed>